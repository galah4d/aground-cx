package main

// import core packages
import "gl"
import "glfw"
import "os"

// keyboard key codes
var RIGHT_ARROW_KEY i32 = 262
var LEFT_ARROW_KEY i32 = 263
var DOWN_ARROW_KEY i32 = 264
var UP_ARROW_KEY i32 = 265
var ENTER_KEY i32 = 257
var L_KEY i32 = 76

/* Function     : initGLFW
   Desctription : Initializes the game window and input callback functions.
*/
func initGLFW() {
	glfw.Init()
	glfw.WindowHint(glfw.Resizable, glfw.False)
	glfw.WindowHint(glfw.ContextVersionMajor, 2)
  glfw.WindowHint(glfw.ContextVersionMinor, 1)

	glfw.CreateWindow("window", SCREEN_WIDTH, SCREEN_HEIGHT, "Aground") // TODO add fullscreen support
	glfw.MakeContextCurrent("window")

	glfw.SetKeyCallback("window", "keyboardCallback")
	glfw.SetMouseButtonCallback("window", "mouseButtonCallback")
}

/* Function     : initOpenGL
   Output       : OpenGL program (program i32)
   Desctription : Initializes the OpenGL lib.
*/
func initGL() (program i32) {
	gl.Init()
	gl.Enable(gl.BLEND)
  gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
	gl.Enable(gl.DEPTH_TEST)
	gl.Enable(gl.TEXTURE_2D)

	program = gl.CreateProgram()
	gl.LinkProgram(program)
	return program
}


// -----------------------------------------------------------------------------

func keyboardCallback(window str, key i32, scancode i32, action i32, mods i32) () {
  // Movement keys
	if bool.and(i32.eq(key, RIGHT_ARROW_KEY), i32.eq(action, 1)) {
    g_game.player = SetPlayerDirection(g_game.player, 1, 0)

	} else if bool.and(i32.eq(key, LEFT_ARROW_KEY), i32.eq(action, 1)) {
		g_game.player = SetPlayerDirection(g_game.player, -1, 0)

	} else if bool.and(i32.eq(key, DOWN_ARROW_KEY), i32.eq(action, 1)) {
		g_game.player = SetPlayerDirection(g_game.player, 0, 1)

	} else if bool.and(i32.eq(key, UP_ARROW_KEY), i32.eq(action, 1)) {
		g_game.player = SetPlayerDirection(g_game.player, 0, -1)
  }

  if bool.and(i32.eq(key, ENTER_KEY), i32.eq(action, 1)) {
    g_game.player = PlayerHit(g_game.player)
  }

  if bool.and(i32.eq(key, L_KEY), i32.eq(action, 1)) {
    g_game.player = PlayerUse(g_game.player)
  }
}

func mouse_button_callback(window str, key i32, action i32, mods i32) () {
	// TODO
}

// -----------------------------------------------------------------------------

var current_scene Scene

func main() {
  initGLFW()
	var program i32
	program = initGL()

  // init all scenes
  current_scene = NewGameScene(SCREEN_WIDTH, SCREEN_HEIGHT)

  // init game
  g_game = NewGame()

  // game loop
  for bool.not(glfw.ShouldClose("window")) {
    gl.Clear(i32.bitor(gl.COLOR_BUFFER_BIT, gl.DEPTH_BUFFER_BIT))
		gl.LoadIdentity()

		g_game = GameUpdate(g_game)

    // render scene
    GameSceneRender(current_scene)

    // render game objects
    GameRender(g_game, program)

    // handle event callbacks
    glfw.PollEvents()
		glfw.SwapBuffers("window")
  }
}
